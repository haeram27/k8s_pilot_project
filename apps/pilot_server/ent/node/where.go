// Code generated by ent, DO NOT EDIT.

package node

import (
	"pilot_server/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Node {
	return predicate.Node(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Node {
	return predicate.Node(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Node {
	return predicate.Node(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Node {
	return predicate.Node(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Node {
	return predicate.Node(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Node {
	return predicate.Node(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Node {
	return predicate.Node(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Node {
	return predicate.Node(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Node {
	return predicate.Node(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Timestamp applies equality check predicate on the "timestamp" field. It's identical to TimestampEQ.
func Timestamp(v string) predicate.Node {
	return predicate.Node(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTimestamp), v))
	})
}

// PodInfo applies equality check predicate on the "pod_info" field. It's identical to PodInfoEQ.
func PodInfo(v string) predicate.Node {
	return predicate.Node(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPodInfo), v))
	})
}

// TimestampEQ applies the EQ predicate on the "timestamp" field.
func TimestampEQ(v string) predicate.Node {
	return predicate.Node(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTimestamp), v))
	})
}

// TimestampNEQ applies the NEQ predicate on the "timestamp" field.
func TimestampNEQ(v string) predicate.Node {
	return predicate.Node(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTimestamp), v))
	})
}

// TimestampIn applies the In predicate on the "timestamp" field.
func TimestampIn(vs ...string) predicate.Node {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Node(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTimestamp), v...))
	})
}

// TimestampNotIn applies the NotIn predicate on the "timestamp" field.
func TimestampNotIn(vs ...string) predicate.Node {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Node(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTimestamp), v...))
	})
}

// TimestampGT applies the GT predicate on the "timestamp" field.
func TimestampGT(v string) predicate.Node {
	return predicate.Node(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTimestamp), v))
	})
}

// TimestampGTE applies the GTE predicate on the "timestamp" field.
func TimestampGTE(v string) predicate.Node {
	return predicate.Node(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTimestamp), v))
	})
}

// TimestampLT applies the LT predicate on the "timestamp" field.
func TimestampLT(v string) predicate.Node {
	return predicate.Node(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTimestamp), v))
	})
}

// TimestampLTE applies the LTE predicate on the "timestamp" field.
func TimestampLTE(v string) predicate.Node {
	return predicate.Node(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTimestamp), v))
	})
}

// TimestampContains applies the Contains predicate on the "timestamp" field.
func TimestampContains(v string) predicate.Node {
	return predicate.Node(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTimestamp), v))
	})
}

// TimestampHasPrefix applies the HasPrefix predicate on the "timestamp" field.
func TimestampHasPrefix(v string) predicate.Node {
	return predicate.Node(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTimestamp), v))
	})
}

// TimestampHasSuffix applies the HasSuffix predicate on the "timestamp" field.
func TimestampHasSuffix(v string) predicate.Node {
	return predicate.Node(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTimestamp), v))
	})
}

// TimestampEqualFold applies the EqualFold predicate on the "timestamp" field.
func TimestampEqualFold(v string) predicate.Node {
	return predicate.Node(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTimestamp), v))
	})
}

// TimestampContainsFold applies the ContainsFold predicate on the "timestamp" field.
func TimestampContainsFold(v string) predicate.Node {
	return predicate.Node(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTimestamp), v))
	})
}

// PodInfoEQ applies the EQ predicate on the "pod_info" field.
func PodInfoEQ(v string) predicate.Node {
	return predicate.Node(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPodInfo), v))
	})
}

// PodInfoNEQ applies the NEQ predicate on the "pod_info" field.
func PodInfoNEQ(v string) predicate.Node {
	return predicate.Node(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPodInfo), v))
	})
}

// PodInfoIn applies the In predicate on the "pod_info" field.
func PodInfoIn(vs ...string) predicate.Node {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Node(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPodInfo), v...))
	})
}

// PodInfoNotIn applies the NotIn predicate on the "pod_info" field.
func PodInfoNotIn(vs ...string) predicate.Node {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Node(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPodInfo), v...))
	})
}

// PodInfoGT applies the GT predicate on the "pod_info" field.
func PodInfoGT(v string) predicate.Node {
	return predicate.Node(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPodInfo), v))
	})
}

// PodInfoGTE applies the GTE predicate on the "pod_info" field.
func PodInfoGTE(v string) predicate.Node {
	return predicate.Node(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPodInfo), v))
	})
}

// PodInfoLT applies the LT predicate on the "pod_info" field.
func PodInfoLT(v string) predicate.Node {
	return predicate.Node(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPodInfo), v))
	})
}

// PodInfoLTE applies the LTE predicate on the "pod_info" field.
func PodInfoLTE(v string) predicate.Node {
	return predicate.Node(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPodInfo), v))
	})
}

// PodInfoContains applies the Contains predicate on the "pod_info" field.
func PodInfoContains(v string) predicate.Node {
	return predicate.Node(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPodInfo), v))
	})
}

// PodInfoHasPrefix applies the HasPrefix predicate on the "pod_info" field.
func PodInfoHasPrefix(v string) predicate.Node {
	return predicate.Node(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPodInfo), v))
	})
}

// PodInfoHasSuffix applies the HasSuffix predicate on the "pod_info" field.
func PodInfoHasSuffix(v string) predicate.Node {
	return predicate.Node(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPodInfo), v))
	})
}

// PodInfoEqualFold applies the EqualFold predicate on the "pod_info" field.
func PodInfoEqualFold(v string) predicate.Node {
	return predicate.Node(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPodInfo), v))
	})
}

// PodInfoContainsFold applies the ContainsFold predicate on the "pod_info" field.
func PodInfoContainsFold(v string) predicate.Node {
	return predicate.Node(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPodInfo), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Node) predicate.Node {
	return predicate.Node(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Node) predicate.Node {
	return predicate.Node(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Node) predicate.Node {
	return predicate.Node(func(s *sql.Selector) {
		p(s.Not())
	})
}
